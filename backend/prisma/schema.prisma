// TaskFlow - Prisma Schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model
model User {
  id            String   @id @default(uuid())
  email         String   @unique
  password      String?  // OAuth users may not have password
  name          String
  avatar        String?
  provider      String   @default("email") // email, google, github
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  workspaces          WorkspaceMember[]
  assignedCards       Card[]   @relation("CardAssignee")
  createdCards        Card[]   @relation("CardCreator")
  comments            Comment[]
  attachments         Attachment[]
  activities          ActivityLog[]
  notifications       Notification[]
  workspaceInvitations WorkspaceInvitation[]

  @@map("users")
}

// Workspace Model
model Workspace {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members     WorkspaceMember[]
  boards      Board[]
  invitations WorkspaceInvitation[]

  @@map("workspaces")
}

// WorkspaceMember (Many-to-Many relationship)
model WorkspaceMember {
  id           String   @id @default(uuid())
  role         String   @default("MEMBER") // OWNER, ADMIN, MEMBER
  joinedAt     DateTime @default(now())

  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@map("workspace_members")
}

// Board Model
model Board {
  id           String   @id @default(uuid())
  name         String
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  columns      Column[]

  @@map("boards")
}

// Column Model (Kanban columns: Todo, In Progress, Done, etc.)
model Column {
  id        String   @id @default(uuid())
  title     String
  order     Int      // Column order in board
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  boardId   String
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)

  cards     Card[]

  @@map("columns")
}

// Card Model (Task cards)
model Card {
  id          String    @id @default(uuid())
  title       String
  description String?   @db.Text
  order       Int       // Card order within column
  dueDate     DateTime?
  labels      String[]  @default([])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  columnId    String
  column      Column    @relation(fields: [columnId], references: [id], onDelete: Cascade)

  assigneeId  String?
  assignee    User?     @relation("CardAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)

  creatorId   String
  creator     User      @relation("CardCreator", fields: [creatorId], references: [id], onDelete: Cascade)

  comments      Comment[]
  attachments   Attachment[]
  activities    ActivityLog[]
  notifications Notification[]

  @@map("cards")
}

// Comment Model
model Comment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  mentions  String[] @default([]) // Array of user IDs mentioned in the comment
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cardId    String
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)

  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("comments")
}

// Attachment Model (File attachments for cards)
model Attachment {
  id           String   @id @default(uuid())
  filename     String   // Original filename
  storedName   String   // Stored filename (unique)
  mimeType     String   // MIME type (e.g., image/png)
  size         Int      // File size in bytes
  url          String   // File URL or path
  createdAt    DateTime @default(now())

  cardId       String
  card         Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)

  uploadedById String
  uploadedBy   User     @relation(fields: [uploadedById], references: [id], onDelete: Cascade)

  @@map("attachments")
}

// ActivityLog Model (Track card activities for collaboration)
model ActivityLog {
  id         String   @id @default(uuid())
  actionType String   // CREATE_CARD, UPDATE_CARD, MOVE_CARD, ADD_COMMENT, etc.
  details    Json?    // Store old/new values, additional context
  createdAt  DateTime @default(now())

  cardId     String
  card       Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)

  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activity_logs")
  @@index([cardId, createdAt])
}

// Notification Model (User notifications for collaboration)
model Notification {
  id        String   @id @default(uuid())
  type      String   // ASSIGNED, MENTIONED, COMMENT_ADDED, DUE_DATE_SOON, WORKSPACE_INVITATION, etc.
  message   String   // Human-readable notification message
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  cardId    String?
  card      Card?    @relation(fields: [cardId], references: [id], onDelete: Cascade)

  workspaceInvitationId String?
  workspaceInvitation   WorkspaceInvitation? @relation(fields: [workspaceInvitationId], references: [id], onDelete: Cascade)

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
  @@index([userId, read, createdAt])
}

// WorkspaceInvitation Model (Invitation system for workspace collaboration)
model WorkspaceInvitation {
  id          String   @id @default(uuid())
  role        String   @default("MEMBER") // ADMIN, MEMBER
  status      String   @default("PENDING") // PENDING, ACCEPTED, REJECTED
  createdAt   DateTime @default(now())
  respondedAt DateTime?

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  invitedUserId String
  invitedUser   User     @relation(fields: [invitedUserId], references: [id], onDelete: Cascade)

  notifications Notification[]

  @@map("workspace_invitations")
}
